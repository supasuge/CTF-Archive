#!/usr/local/bin/sage
from sage.all import *
proof.all(False)
n = 200697881793620389197751143658858424075492240536004468937396825699483210280999214674828938407830171522000573896259413231953182108686782019862906633259090814783111593304404356927145683840948437835426703183742322171552269964159917779
e = 65537
c = 77163248552037496974551155836778067107086838375316358094323022740486805320709021643760063197513767812819672431278113945221579920669369599456818771428377647053211504958874209832487794913919451387978942636428157218259130156026601708
r = 30736331670163278077316573297195977299089049174626053101058657011068283335270



rp = factor(r)[-1][0]
F = GF(rp)

for guess_d1 in range(1, 1000):
    t = Zmod(r // gcd(r, guess_d1))(n) / guess_d1
    if not t.is_square():
        continue
    print(f"{guess_d1 = }")
    qp = ZZ(F(t).sqrt())

    x = polygen(Zmod(n))
    f = qp + x * rp
    rs = f.monic().small_roots(X=2**256 // rp, beta=0.33, epsilon=0.02)
    if rs:
        g = gcd(ZZ(f(rs[0])), n)
        if g != 1 and g != n:
            print(g)
            q = g
            # q = 57138703210086603216917938147752779170509477993762976004506899310197198907231
            p = n // q
            assert p * q == n
            phi = (p - 1) * (q - 1)
            d = inverse_mod(e, phi)
            m = pow(c, d, n)
            flag = int(m).to_bytes(100, "big").strip(b"\x00")
            print(flag)
            break

